swagger: '2.0'
info:
  description: 'This is an example API of DevMountain Products'
  version: '1.0.0'
  title: 'DevMountain Products'
  termsOfService: 'http://swagger.io/terms/'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'r3products.devmountain.com'
basePath: '/api'
tags:
  - name: 'key'
    description: 'Obtain API key'
  - name: 'products'
    description: 'Product catalog operations'
  - name: 'cart'
    description: 'User cart operations'
schemes:
  - 'https'
  - 'http'
paths:
  /key:
    get:
      tags:
        - 'key'
      summary: 'Request an API key to interact with the other API endpoints'
      description: ''
      operationId: 'getKey'
      # consumes:
      # - "application/json"
      # - "application/xml"
      produces:
        - 'application/json'
        # parameters:
        # - in: "body"
        #   name: "body"
        #   description: "Pet object that needs to be added to the store"
        #   required: true
        #   schema:
        #     $ref: "#/definitions/Pet"
      responses:
        200:
          description: 'successful'
          schema:
            type: 'object'
            $ref: '#/definitions/Key'
  /products:
    get:
      tags:
        - 'products'
      summary: 'Retreives entire catalog of available products'
      description: ''
      operationId: 'getProducts'
      produces:
        - 'application/json'
      parameters:
        - name: 'key'
          in: 'query'
          type: 'string'
          description: 'API key'
          required: true
        - name: 'min'
          in: 'query'
          type: 'string'
          description: 'Minimum price to filter by'
          required: true
        - name: 'max'
          in: 'query'
          type: 'string'
          description: 'Maximum price to filter by'
          required: true
        - name: 'name'
          in: 'query'
          type: 'string'
          description: 'Search term for product name'
          required: true
        - name: 'category'
          in: 'query'
          type: 'string'
          description: 'Category to filter by'
          required: true
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Product'
    post:
      tags:
        - 'products'
      summary: 'Add a product to the catalog of available products'
      description: ''
      operationId: 'newProduct'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'object with all properties of the product that you would like to add'
          required: true
          schema:
            $ref: '#/definitions/ProductBody'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Product'
        400:
          description: "'Required property missing off of request body.'"
        401:
          description: 'No API key found'
          schema:
            type: 'string'
            example: 'This request requires an API key'
  /cart:
    get:
      tags:
        - 'cart'
      summary: 'Returns the content of the users cart'
      description: ''
      operationId: 'getCart'
      # consumes:
      # - "application/json"
      produces:
        - 'application/json'
      parameters:
        - name: 'key'
          in: 'query'
          type: 'string'
          description: 'API key'
          required: true
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/CartProduct'
        401:
          description: 'No API key found'
          schema:
            type: 'string'
            example: 'This request requires an API key'
    put:
      tags:
        - 'cart'
      summary: 'Updates the quantity of a specific item in a cart based on the product ID'
      description: ''
      operationId: 'updateQuantity'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - name: 'key'
          in: 'query'
          type: 'string'
          description: 'API key'
          required: true
        - in: 'body'
          name: 'body'
          description: 'An object with the ID of a product in the cart and the quantity that should be updated for that product in the cart'
          required: true
          schema:
            $ref: '#/definitions/UpdateQtyBody'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/UpdateQtyBodyResponse'
        401:
          description: 'No API key found'
          schema:
            type: 'string'
            example: 'This request requires an API key'
  /cart/{productId}:
    post:
      tags:
        - 'cart'
      summary: "Adds an item to the user's cart based on the product ID"
      description: 'If the item is not currently in the cart, it will add it to the cart. If the item is already in the cart, the quantity of that item will increase by 1.'
      operationId: 'addToCart'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - name: 'key'
          in: 'query'
          type: 'string'
          description: 'API key'
          required: true
        - name: 'productId'
          in: 'path'
          description: 'ID of the product to add to the cart'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/CartProduct'
        401:
          description: 'No API key found'
          schema:
            type: 'string'
            example: 'This request requires an API key'
    delete:
      tags:
        - 'cart'
      summary: "Removes an item to the user's cart based on the product ID"
      description: ''
      operationId: 'deleteFromCart'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - name: 'key'
          in: 'query'
          type: 'string'
          description: 'API key'
          required: true
        - name: 'productId'
          in: 'path'
          description: 'ID of the product to add to the cart'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/CartProduct'
        401:
          description: 'No API key found'
          schema:
            type: 'string'
            example: 'This request requires an API key'
  /cart/checkout:
    delete:
      tags:
        - 'cart'
      summary: "Removes all items from the user's cart"
      description: ''
      operationId: 'cartCheckout'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - name: 'key'
          in: 'query'
          type: 'string'
          description: 'API key'
          required: true
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/CartProduct'
        401:
          description: 'No API key found'
          schema:
            type: 'string'
            example: 'This request requires an API key'

definitions:
  Key:
    type: 'object'
    properties:
      key:
        type: 'integer'
        example: '4f7f61fd'
  Product:
    type: 'object'
    properties:
      id:
        type: 'integer'
        example: 1
      name:
        type: 'string'
        example: 'bike helmet'
      description:
        type: 'string'
        example: 'a protective apparatus for a human cranium'
      price:
        type: 'number'
        example: 24.99
      image:
        type: 'string'
        example: http://image.com/bikehelmet.png
  ProductBody:
    type: 'object'
    properties:
      name:
        type: 'string'
        example: 'bike helmet'
      description:
        type: 'string'
        example: 'a protective apparatus for a human cranium'
      price:
        type: 'number'
        example: 24.99
      image:
        type: 'string'
        example: http://image.com/bikehelmet.png
  UpdateQtyBody:
    type: 'object'
    properties:
      id:
        type: 'integer'
        example: 1
      quantity:
        type: 'string'
        example: 5

  UpdateQtyBodyResponse:
    type: 'object'
    properties:
      id:
        type: 'integer'
        example: 1
      name:
        type: 'string'
        example: 'bike helmet'
      description:
        type: 'string'
        example: 'a protective apparatus for a human cranium'
      price:
        type: 'number'
        example: 24.99
      quantity:
        type: 'integer'
        example: 5
      image:
        type: 'string'
        example: http://image.com/bikehelmet.png
  CartProduct:
    type: 'object'
    properties:
      id:
        type: 'integer'
        example: 1
      name:
        type: 'string'
        example: 'bike helmet'
      description:
        type: 'string'
        example: 'a protective apparatus for a human cranium'
      price:
        type: 'number'
        example: 24.99
      quantity:
        type: 'integer'
        format: 'int64'
        example: 1
      image:
        type: 'string'
        example: http://image.com/bikehelmet.png
